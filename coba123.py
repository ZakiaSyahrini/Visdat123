# -*- coding: utf-8 -*-
"""COBA123.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uynyJFYyOhnPLdKAywenZ4K-mCoqA5dq

# <center>Interactive Data Visualization in Python With Bokeh</center>

## Adding Interaction
"""

!pip install pyproj
from bokeh.io import curdoc
from pyproj import Proj, transform
import pandas as pd
import datetime as dt
from bokeh.palettes import Spectral6
from bokeh.layouts import widgetbox, row, gridplot
from bokeh.models import Slider, Select
from bokeh.models import DatePicker, Select, ColumnDataSource, ColorBar
import pandas as pd
from bokeh.io import curdoc
from bokeh.transform import linear_cmap
from bokeh.plotting import figure
from bokeh.models import HoverTool, ColumnDataSource
from bokeh.models import CategoricalColorMapper
from bokeh.palettes import Spectral6
from bokeh.layouts import widgetbox, row, gridplot
from bokeh.models import Slider, Select
from bokeh.tile_providers import get_provider, WIKIMEDIA, CARTODBPOSITRON, STAMEN_TERRAIN, STAMEN_TONER, ESRI_IMAGERY, OSM

import warnings

data = pd.read_csv("owid-covid-data.csv")
data.set_index('date', inplace=True)

data.head(5)

# Make a list of the unique values from the region column: regions_list
regions_list = data.location.unique().tolist()

# Make a color mapper: color_mapper
color_mapper = CategoricalColorMapper(factors=regions_list, palette=Spectral6)

#define beberapa variabel untuk membuat peta dengan cartodbpositron
inProj = Proj(init='epsg:3857')
outProj = Proj(init='epsg:4326')

ind_lon1, ind_lat1 = transform(outProj,inProj,90,-15)
ind_lon2, ind_lat2 = transform(outProj,inProj,150,20)
cartodb = get_provider(CARTODBPOSITRON)

df = data[data.index == '2020-02-24']

#define variabel nam untuk menampung nama kolom yang di select
nam = []
for i in df.new_cases:
    nam.append("new_cases")
   # nam.append("total_death")

#source digunakan untuk menampilkan data yang akan ditampilkan (data awal)
source = ColumnDataSource(data={
    'x'         : df.total_cases, #define x dengan kolom mercatorX dari data dengan index tanggal 2020-03-01
    'y'         : df.total_deaths, #define y dengan kolom mercatorY dari data dengan index tanggal 2020-03-01
    'dat'       : df.new_cases, #define dat dengan kolom new_cases dari data dengan index tanggal 2020-03-01
    'nama'      : df.location #define nama dengan nama kolom new_cases 
})

#mapper adalah list color dimana akan berwarna merah jika nilai dari data sekitar 800000 dan berwarna biru jika bernilai mendekati 0
mapper = linear_cmap('dat', Spectral6 , 0 , 849875)

#menampilkan peta pada visualisasi data
plot = figure(plot_width=900, plot_height=700,
           x_range=(ind_lon1, ind_lon2), y_range=(ind_lat1, ind_lat2),
           x_axis_type="mercator", y_axis_type="mercator",
           tooltips=[
                    ("lokasi", "@nama"), ("Jumlah", "@dat"), 
                    ("total kematian", "@x"), ("total_kasus", "@y") #menampilkan data tiap kolom/data yang diselect
                    ],
           title="Covid 19")

plot.add_tile(cartodb)
#plotting scatter plot (circle)
plot.circle(x='x', y='y',
         size=10,
         line_color=mapper, color=mapper,
         fill_alpha=1.0,
         source=source)
#menampilkan color bar
color_bar = ColorBar(color_mapper=mapper['transform'], width=5)

plot.add_layout(color_bar, 'right')

def update_plot(attr, old, new):
    df = data[data.index == str(dPicker.value)] #update 'df' dengan data dari index date yang di select oleh fitur datepicker
    nam = []
    for i in df.new_cases:
        nam.append(str(data_select.value)) #update var nam
        #nam.append(str(data_select1.value))
    source.data = {
        'x'         : df.total_cases, #update x dengan kolom mercatorX dari data index date yang di select oleh fitur datepicker
        'y'         : df.total_deaths, #define y dengan kolom mercatorY dari data index date yang di select oleh fitur datepicker
        'dat'       : df[data_select.value], #update dat dengan kolom new_cases dari data kolom yang diselect pada fitur dropdwon select
        'nama'      : nam #update nama dengan nama kolom sesuai dengan kolom yang diselect
    }

#define fitur interaktif date picker
dPicker = DatePicker(
    title = 'Date',
    value=dt.datetime(2020, 2, 24).date(), 
    min_date= dt.datetime(2020, 2, 24).date(), max_date=dt.datetime(2021, 12, 3).date()
)

dPicker.on_change('value', update_plot)

#define fitur interaktif dropdown dan select
data_select = Select(
    options=['total_cases', 'new_cases', 'total_deaths'	],
    value='new_cases',
    title='x-axis data'
)

data_select.on_change('value', update_plot)

#data_select1 = Select(
 #   options=['new_cases', 'new_deaths',	'new_recovered', 'new_activeCases', 'total_cases', 'total_deaths',	'total_recovered', 'total_activeCases'],
  #  value='total_death',
   # title='y-axis data'
#)

#data_select1.on_change('value', update_plot)

#memasukan seluruh fitur interaktif dan juga plotingan kedalam layout
layout = row(widgetbox(dPicker, data_select), plot) 
curdoc().add_root(layout)

"""For more on all things interaction in Bokeh, [**Adding Interactions**](https://docs.bokeh.org/en/latest/docs/user_guide/interaction.html) in the Bokeh User Guide is a great place to start."""